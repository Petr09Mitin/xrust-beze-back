version: "3.9"

services:
  zookeeper_xb:
    container_name: zookeeper_xb
    image: confluentinc/cp-zookeeper:7.6.0
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka_xb:
    container_name: kafka_xb
    image: confluentinc/cp-kafka:7.6.0
    restart: unless-stopped
    environment:
      KAFKA_LOG_RETENTION_MINUTES: 1440 # save data for 24hrs
      KAFKA_ZOOKEEPER_CONNECT: zookeeper_xb:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_xb:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      # This is required when you are running with a single-node cluster
      # specify the replication factor for the __consumer_offsets topic
      # __consumer_offsets topic preserves consumer offsets when consumer group commits offsets to Kafka
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # when applications attempt to produce, consume, or fetch metadata for a non-existent topic,
      # Kafka will automatically create the topic with the default replication factor and number of partitions
      # which is true by default
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper_xb

  mongo_db:
    image: mongo:4.4.10
    ports:
      - "27025:27017"
    container_name: mongo_db
    restart: always
    # env_file:
    #   - ./.env
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: admin
    #   MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - ./dev/mongo:/scripts
      - mongo_data:/data/db

  minio-xb:
    image: minio/minio:RELEASE.2025-03-12T18-04-18Z
    container_name: minio-xb
    restart: unless-stopped
    env_file:
      - ./.env
    ports:
      - "9000:9000"
      - "35211:35211"
    volumes:
      - minio_data:/data
    command: server /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://minio-xb:9000/minio/health/live" ]
      interval: 10s
      timeout: 10s
      retries: 3

  file_service:
    image: petr09mitin/xrust_beze_file:latest
    container_name: file_service
    ports:
      - "8084:8080"  # HTTP порт (изменен, чтобы не конфликтовать с другими сервисами)
      - "50052:50051"  # gRPC порт
    volumes:
      - .:/app
    restart: always
    depends_on:
      - minio-xb

  chat_service:
    image: petr09mitin/xrust_beze_chat:latest
    container_name: chat_service
    tty: true
    ports:
      - "8085:8080"
    restart: always
    volumes:
      - .:/app
    depends_on:
      - mongo_db
      - kafka_xb
      - file_service

  user_service:
    image: petr09mitin/xrust_beze_user:latest
    container_name: user_service
    ports:
      - "8083:8080"  # HTTP порт (изменен, чтобы не конфликтовать с другими сервисами)
      - "50051:50051"  # gRPC порт
    volumes:
      - .:/app
    restart: always
    depends_on:
      - mongo_db
      - file_service

  # Сервис для AI дополнения ответов эксперта
  ml_explanator:
    image: petr09mitin/ml_explanator:latest
    container_name: ml_explanator
    ports:
      - "8091:8091"
    env_file:
      - ./ml_explanator.env

  ml_moderator:
    image: petr09mitin/ml_moderator:latest
    container_name: ml_moderator
    ports:
      - "8066:8066"

  nginx_xb:
    image: nginx:1.27.4-perl
    container_name: nginx_xb
    restart: on-failure
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - chat_service
      - ml_explanator
      - user_service
      - file_service
    volumes:
      - ./dev/nginx:/etc/nginx
      - /etc/letsencrypt:/etc/letsencrypt
      - ../XRUST_BEZE_frontend/skillsharing/dist:/dist

  auth_service:
    image: petr09mitin/xrust_beze_auth:latest  # предположим, что билдится как и другие сервисы
    container_name: auth_service
    ports:
      - "8082:8080"  # или любой другой, чтобы не конфликтовать
    volumes:
      - .:/app
    restart: always
    depends_on:
      - redis_xb
      - user_service

  redis_xb:
    image: redis:alpine
    container_name: redis_xb
    ports:
      - "6370:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped


  ml_image_moderator:
    image: petr09mitin/ml_image_moderator:latest
    container_name: ml_image_moderator
    ports:
      - "8199:8199"
    environment:
      - GRPC_PORT=8199
      - S3_ENDPOINT_URL=http://minio-xb:9000
    env_file:
      - ./.env

volumes:
  mongo_data:
  kafka_data:
  minio_data:
  redis_data:
