from mistralai import Mistral
import os
import logging

logging.basicConfig(level=logging.INFO)

API_KEY = os.environ.get('API_KEY')

client = Mistral(api_key=API_KEY)


async def summarize(query, answer, model="mistral-small-latest"):
    logging.info(f"Query: {query}.")
    logging.info(f"Answer: {answer}.")
    prompt = (f'Твоя задача — дополнить ответ другого эксперта на заданный вопрос.) '
              ''
              'Входные данные: '
              f'1. Вопрос пользователя (если в наличии): {query} '
              f'2. Ответ другого эксперта: {answer} '
              'Твоя задача: '
              '1. Дополнить ответ, указав моменты, которые эксперт упустил. '
              '2. Привести примеры для лучшего понимания темы. '
              '3. Сформировать поисковые запросы для поиска дополнительных материалов по теме. '
              ''
              'Формат ответа (следуй указанному формату строго): '
              '**Дополнение ответа эксперта:** '
              '---'
              '[Опиши недостающие моменты, дополни информацию, разверни сложные аспекты.] '
              ''
              '**Упущенные, но важные моменты:** '
              '---'
              '[Перечисли или опиши аспекты, которые эксперт не учел.] '
              ''
              '**Примеры:**'
              '---'
              '[Приведи конкретные примеры, демонстрирующие основные идеи.] '
              ''
              '**Поисковые запросы для поиска статей:**'
              '---'
              '&=)[Перечисли поисковые запросы, которые помогут найти качественные материалы в формате научных статей, тематических журналов, репозиториев и доступных pdf-документов.](=&)')

    messages = [{"role": "system",
                 "content": "Ты эксперт в области программирования, машинного обучения, Data Science, системного дизайна и других областях IT. "},
                {"role": "user", "content": prompt}]
    chat_response = client.chat.complete(model=model, messages=messages, )
    return chat_response.choices[0].message.content
