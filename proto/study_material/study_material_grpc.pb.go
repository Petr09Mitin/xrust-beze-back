// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/study_material/study_material.proto

package study_material

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StudyMaterialService_GetStudyMaterialByID_FullMethodName        = "/study_material.StudyMaterialService/GetStudyMaterialByID"
	StudyMaterialService_GetStudyMaterialsByTags_FullMethodName     = "/study_material.StudyMaterialService/GetStudyMaterialsByTags"
	StudyMaterialService_GetStudyMaterialsByName_FullMethodName     = "/study_material.StudyMaterialService/GetStudyMaterialsByName"
	StudyMaterialService_GetStudyMaterialsByAuthorID_FullMethodName = "/study_material.StudyMaterialService/GetStudyMaterialsByAuthorID"
	StudyMaterialService_CreateStudyMaterial_FullMethodName         = "/study_material.StudyMaterialService/CreateStudyMaterial"
	StudyMaterialService_DeleteStudyMaterial_FullMethodName         = "/study_material.StudyMaterialService/DeleteStudyMaterial"
)

// StudyMaterialServiceClient is the client API for StudyMaterialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyMaterialServiceClient interface {
	GetStudyMaterialByID(ctx context.Context, in *GetStudyMaterialByIDRequest, opts ...grpc.CallOption) (*StudyMaterialResponse, error)
	GetStudyMaterialsByTags(ctx context.Context, in *GetStudyMaterialsByTagsRequest, opts ...grpc.CallOption) (*StudyMaterialListResponse, error)
	GetStudyMaterialsByName(ctx context.Context, in *GetStudyMaterialsByNameRequest, opts ...grpc.CallOption) (*StudyMaterialListResponse, error)
	GetStudyMaterialsByAuthorID(ctx context.Context, in *GetStudyMaterialsByAuthorIDRequest, opts ...grpc.CallOption) (*StudyMaterialListResponse, error)
	CreateStudyMaterial(ctx context.Context, in *CreateStudyMaterialRequest, opts ...grpc.CallOption) (*StudyMaterialResponse, error)
	DeleteStudyMaterial(ctx context.Context, in *DeleteStudyMaterialRequest, opts ...grpc.CallOption) (*DeleteStudyMaterialResponse, error)
}

type studyMaterialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyMaterialServiceClient(cc grpc.ClientConnInterface) StudyMaterialServiceClient {
	return &studyMaterialServiceClient{cc}
}

func (c *studyMaterialServiceClient) GetStudyMaterialByID(ctx context.Context, in *GetStudyMaterialByIDRequest, opts ...grpc.CallOption) (*StudyMaterialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudyMaterialResponse)
	err := c.cc.Invoke(ctx, StudyMaterialService_GetStudyMaterialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyMaterialServiceClient) GetStudyMaterialsByTags(ctx context.Context, in *GetStudyMaterialsByTagsRequest, opts ...grpc.CallOption) (*StudyMaterialListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudyMaterialListResponse)
	err := c.cc.Invoke(ctx, StudyMaterialService_GetStudyMaterialsByTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyMaterialServiceClient) GetStudyMaterialsByName(ctx context.Context, in *GetStudyMaterialsByNameRequest, opts ...grpc.CallOption) (*StudyMaterialListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudyMaterialListResponse)
	err := c.cc.Invoke(ctx, StudyMaterialService_GetStudyMaterialsByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyMaterialServiceClient) GetStudyMaterialsByAuthorID(ctx context.Context, in *GetStudyMaterialsByAuthorIDRequest, opts ...grpc.CallOption) (*StudyMaterialListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudyMaterialListResponse)
	err := c.cc.Invoke(ctx, StudyMaterialService_GetStudyMaterialsByAuthorID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyMaterialServiceClient) CreateStudyMaterial(ctx context.Context, in *CreateStudyMaterialRequest, opts ...grpc.CallOption) (*StudyMaterialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudyMaterialResponse)
	err := c.cc.Invoke(ctx, StudyMaterialService_CreateStudyMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyMaterialServiceClient) DeleteStudyMaterial(ctx context.Context, in *DeleteStudyMaterialRequest, opts ...grpc.CallOption) (*DeleteStudyMaterialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStudyMaterialResponse)
	err := c.cc.Invoke(ctx, StudyMaterialService_DeleteStudyMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyMaterialServiceServer is the server API for StudyMaterialService service.
// All implementations must embed UnimplementedStudyMaterialServiceServer
// for forward compatibility.
type StudyMaterialServiceServer interface {
	GetStudyMaterialByID(context.Context, *GetStudyMaterialByIDRequest) (*StudyMaterialResponse, error)
	GetStudyMaterialsByTags(context.Context, *GetStudyMaterialsByTagsRequest) (*StudyMaterialListResponse, error)
	GetStudyMaterialsByName(context.Context, *GetStudyMaterialsByNameRequest) (*StudyMaterialListResponse, error)
	GetStudyMaterialsByAuthorID(context.Context, *GetStudyMaterialsByAuthorIDRequest) (*StudyMaterialListResponse, error)
	CreateStudyMaterial(context.Context, *CreateStudyMaterialRequest) (*StudyMaterialResponse, error)
	DeleteStudyMaterial(context.Context, *DeleteStudyMaterialRequest) (*DeleteStudyMaterialResponse, error)
	mustEmbedUnimplementedStudyMaterialServiceServer()
}

// UnimplementedStudyMaterialServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudyMaterialServiceServer struct{}

func (UnimplementedStudyMaterialServiceServer) GetStudyMaterialByID(context.Context, *GetStudyMaterialByIDRequest) (*StudyMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyMaterialByID not implemented")
}
func (UnimplementedStudyMaterialServiceServer) GetStudyMaterialsByTags(context.Context, *GetStudyMaterialsByTagsRequest) (*StudyMaterialListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyMaterialsByTags not implemented")
}
func (UnimplementedStudyMaterialServiceServer) GetStudyMaterialsByName(context.Context, *GetStudyMaterialsByNameRequest) (*StudyMaterialListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyMaterialsByName not implemented")
}
func (UnimplementedStudyMaterialServiceServer) GetStudyMaterialsByAuthorID(context.Context, *GetStudyMaterialsByAuthorIDRequest) (*StudyMaterialListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyMaterialsByAuthorID not implemented")
}
func (UnimplementedStudyMaterialServiceServer) CreateStudyMaterial(context.Context, *CreateStudyMaterialRequest) (*StudyMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudyMaterial not implemented")
}
func (UnimplementedStudyMaterialServiceServer) DeleteStudyMaterial(context.Context, *DeleteStudyMaterialRequest) (*DeleteStudyMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudyMaterial not implemented")
}
func (UnimplementedStudyMaterialServiceServer) mustEmbedUnimplementedStudyMaterialServiceServer() {}
func (UnimplementedStudyMaterialServiceServer) testEmbeddedByValue()                              {}

// UnsafeStudyMaterialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyMaterialServiceServer will
// result in compilation errors.
type UnsafeStudyMaterialServiceServer interface {
	mustEmbedUnimplementedStudyMaterialServiceServer()
}

func RegisterStudyMaterialServiceServer(s grpc.ServiceRegistrar, srv StudyMaterialServiceServer) {
	// If the following call pancis, it indicates UnimplementedStudyMaterialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StudyMaterialService_ServiceDesc, srv)
}

func _StudyMaterialService_GetStudyMaterialByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudyMaterialByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyMaterialServiceServer).GetStudyMaterialByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudyMaterialService_GetStudyMaterialByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyMaterialServiceServer).GetStudyMaterialByID(ctx, req.(*GetStudyMaterialByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyMaterialService_GetStudyMaterialsByTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudyMaterialsByTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyMaterialServiceServer).GetStudyMaterialsByTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudyMaterialService_GetStudyMaterialsByTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyMaterialServiceServer).GetStudyMaterialsByTags(ctx, req.(*GetStudyMaterialsByTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyMaterialService_GetStudyMaterialsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudyMaterialsByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyMaterialServiceServer).GetStudyMaterialsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudyMaterialService_GetStudyMaterialsByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyMaterialServiceServer).GetStudyMaterialsByName(ctx, req.(*GetStudyMaterialsByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyMaterialService_GetStudyMaterialsByAuthorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudyMaterialsByAuthorIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyMaterialServiceServer).GetStudyMaterialsByAuthorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudyMaterialService_GetStudyMaterialsByAuthorID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyMaterialServiceServer).GetStudyMaterialsByAuthorID(ctx, req.(*GetStudyMaterialsByAuthorIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyMaterialService_CreateStudyMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudyMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyMaterialServiceServer).CreateStudyMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudyMaterialService_CreateStudyMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyMaterialServiceServer).CreateStudyMaterial(ctx, req.(*CreateStudyMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyMaterialService_DeleteStudyMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudyMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyMaterialServiceServer).DeleteStudyMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudyMaterialService_DeleteStudyMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyMaterialServiceServer).DeleteStudyMaterial(ctx, req.(*DeleteStudyMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudyMaterialService_ServiceDesc is the grpc.ServiceDesc for StudyMaterialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudyMaterialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "study_material.StudyMaterialService",
	HandlerType: (*StudyMaterialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudyMaterialByID",
			Handler:    _StudyMaterialService_GetStudyMaterialByID_Handler,
		},
		{
			MethodName: "GetStudyMaterialsByTags",
			Handler:    _StudyMaterialService_GetStudyMaterialsByTags_Handler,
		},
		{
			MethodName: "GetStudyMaterialsByName",
			Handler:    _StudyMaterialService_GetStudyMaterialsByName_Handler,
		},
		{
			MethodName: "GetStudyMaterialsByAuthorID",
			Handler:    _StudyMaterialService_GetStudyMaterialsByAuthorID_Handler,
		},
		{
			MethodName: "CreateStudyMaterial",
			Handler:    _StudyMaterialService_CreateStudyMaterial_Handler,
		},
		{
			MethodName: "DeleteStudyMaterial",
			Handler:    _StudyMaterialService_DeleteStudyMaterial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/study_material/study_material.proto",
}
